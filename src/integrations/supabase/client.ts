
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pnxlnsfzecldanhkgkpq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBueGxuc2Z6ZWNsZGFuaGtna3BxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NTE4NTUsImV4cCI6MjA2MzQyNzg1NX0.nymDNU3ceWisT4ZUelGgJ09JSFUxBt8Cu1QpN6W8X_c";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: typeof localStorage !== 'undefined' ? localStorage : undefined
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
    },
  }
});

// Helper function to map database sale objects to our frontend Sale type
export const mapDatabaseSaleToSale = (dbSale: any) => {
  return {
    id: dbSale.id,
    date: new Date(dbSale.date),
    description: dbSale.description || "",
    quantity: dbSale.quantity || 0,
    unitPrice: dbSale.unit_price || 0,
    totalPrice: dbSale.total_price || 0,
    sellerId: dbSale.seller_id || "",
    sellerName: dbSale.seller_name || "",
    commission: dbSale.commission || 0,
    commissionRate: dbSale.commission_rate || 0,
    status: dbSale.status || "pending",
    observations: dbSale.observations || "",
    customerInfo: {
      name: "Cliente", // This would typically come from a join with customer_info
      phone: "",
      address: "",
      city: "",
      zipCode: "",
      order: ""
    },
    costPrice: dbSale.cost_price,
    profit: dbSale.profit,
    createdAt: new Date(dbSale.created_at),
    updatedAt: new Date(dbSale.updated_at)
  };
};

// Helper function to adapt database fields when needed
export const mapDatabaseFields = <T extends Record<string, any>>(data: any[], fieldMappings: Record<string, string>): T[] => {
  return data.map(item => {
    const mappedItem: Record<string, any> = {};
    
    // Copy all original properties
    Object.keys(item).forEach(key => {
      mappedItem[key] = item[key];
    });
    
    // Map specific fields
    Object.entries(fieldMappings).forEach(([toField, fromField]) => {
      mappedItem[toField] = item[fromField];
    });
    
    return mappedItem as T;
  });
};
